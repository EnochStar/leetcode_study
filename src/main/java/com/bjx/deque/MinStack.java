package com.bjx.deque;

import java.util.ArrayDeque;
import java.util.Deque;

/**
 * @author EnochStar
 * @title: MinStack
 * @projectName leetcode_study
 * @description: 
 * 设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。
 *
 * push(x) ―― 将元素 x 推入栈中。
 * pop()―― 删除栈顶的元素。
 * top()―― 获取栈顶元素。
 * getMin() ―― 检索栈中的最小元素。
 * 
 *
 * 示例:
 *
 * 输入：
 * ["MinStack","push","push","push","getMin","pop","top","getMin"]
 * [[],[-2],[0],[-3],[],[],[],[]]
 *
 * 输出：
 * [null,null,null,null,-3,null,0,-2]
 *
 * 解释：
 * MinStack minStack = new MinStack();
 * minStack.push(-2);
 * minStack.push(0);
 * minStack.push(-3);
 * minStack.getMin();   --> 返回 -3.
 * minStack.pop();
 * minStack.top();      --> 返回 0.
 * minStack.getMin();   --> 返回 -2.
 * 
 *
 * 提示：
 *
 * pop、top 和 getMin 操作总是在 非空栈 上调用。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/min-stack
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * @date 2021/1/30 15:00
 */
public class MinStack {
    /** initialize your data structure here. */

    Deque<Integer> deque;
    int min = Integer.MAX_VALUE;
    public MinStack() {
        deque = new ArrayDeque<>();
    }

    public void push(int x) {
        if (x <= min) {
            deque.push(min);
            min = x;
        }
        deque.push(x);
    }

    public void pop() {
        if (deque.pop() == min)
            min = deque.pop();
    }

    public int top() {
        return deque.peek();
    }

    public int getMin() {
        return min;
    }
}
