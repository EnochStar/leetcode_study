package com.bjx.dp;

import java.util.Arrays;

/**
 * @author EnochStar
 * @title: CoinChange
 * @projectName leetcode_study
 * @description:
 * 给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。
 *
 * 你可以认为每种硬币的数量是无限的。
 *
 *  
 *
 * 示例 1：
 *
 * 输入：coins = [1, 2, 5], amount = 11
 * 输出：3 
 * 解释：11 = 5 + 5 + 1
 * 示例 2：
 *
 * 输入：coins = [2], amount = 3
 * 输出：-1
 * 示例 3：
 *
 * 输入：coins = [1], amount = 0
 * 输出：0
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/coin-change
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * @date 2020/12/16 18:42
 */
public class CoinChange {
    public int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount + 1];
        dp[0] = 0;
        Arrays.fill(dp,Integer.MAX_VALUE);
        for(int i = 1; i <= amount;i++) {
            for(int coin : coins) {
                if (coin <= i)
                    dp[i] = Math.min(dp[i-coin] + 1,dp[i]);
            }
        }
        return dp[amount] > amount ? -1:dp[amount];
    }
}
