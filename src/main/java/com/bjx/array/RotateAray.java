package com.bjx.array;

/**
 * @author EnochStar
 * @title: RotateAray
 * @projectName leetcode_study
 * @description: 
 * 给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。
 *
 *  
 *
 * 进阶：
 *
 * 尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
 * 你可以使用空间复杂度为 O(1) 的 原地 算法解决这个问题吗？
 *  
 *
 * 示例 1:
 *
 * 输入: nums = [1,2,3,4,5,6,7], k = 3
 * 输出: [5,6,7,1,2,3,4]
 * 解释:
 * 向右旋转 1 步: [7,1,2,3,4,5,6]
 * 向右旋转 2 步: [6,7,1,2,3,4,5]
 * 向右旋转 3 步: [5,6,7,1,2,3,4]
 * 示例 2:
 *
 * 输入：nums = [-1,-100,3,99], k = 2
 * 输出：[3,99,-1,-100]
 * 解释: 
 * 向右旋转 1 步: [99,-1,-100,3]
 * 向右旋转 2 步: [3,99,-1,-100]
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/rotate-array
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * @date 2021/1/28 20:32
 */
public class RotateAray {

    // 方法一： 时间复杂度O（n） 空间O(n)
    // public void rotate(int[] nums, int k) {
    //     int len = nums.length;
    //     int[] copy = new int[len];
    //     for(int i = 0;i < len;i++) {
    //         copy[(i + k)%len] = nums[i];
    //     }
    //     System.arraycopy(copy, 0, nums, 0, len);
    // }

    public void rotate(int[] nums, int k) {
        k %= nums.length;
        reverse(0,nums.length - 1,nums);
        reverse(0,k - 1,nums);
        reverse(k,nums.length - 1,nums);
    }
    public void reverse(int start,int end,int[] nums) {
        while(start < end) {
            int tmp = nums[start];
            nums[start] = nums[end];
            nums[end] = tmp;
            start++;
            end--;
        }
    }
}
